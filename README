<h1 align="center">DupFile-Analyzer</h1>

<p align="center">
  <a href="https://github.com/Paulogb98/DupFile-Analyzer/stargazers">
    <img src="https://img.shields.io/github/stars/Paulogb98/DupFile-Analyzer.svg?colorA=orange&colorB=orange&logo=github"
         alt="GitHub stars">
  </a>
  <a href="https://github.com/Paulogb98/DupFile-Analyzer/issues">
        <img src="https://img.shields.io/github/issues/Paulogb98/DupFile-Analyzer.svg"
             alt="GitHub issues">
  </a>
  <a href="https://github.com/Paulogb98/DupFile-Analyzer/blob/master/LICENSE">
        <img src="https://img.shields.io/github/license/Paulogb98/DupFile-Analyzer.svg"
             alt="GitHub license">
  </a>
</p>

<br>

## DESCRI√á√ÉO üîç

DupFile-Analyzer √© uma ferramenta de linha de comando escrita em Rust, projetada para detectar arquivos duplicados em um diret√≥rio e seus subdiret√≥rios. Ela calcula o hash SHA-256 de cada arquivo e identifica duplicatas de forma r√°pida e eficiente, usando processamento paralelo. A compara√ß√£o √© baseada no conte√∫do dos arquivos, independentemente de seus nomes ou da localiza√ß√£o na estrutura de diret√≥rios.

<br>

## PRINCIPAIS FUNCIONALIDADES ‚ú®

- **Hashing com SHA-256:** Garante alta confiabilidade na identifica√ß√£o de arquivos id√™nticos.

- **Detec√ß√£o de Duplicatas:** Encontra arquivos com o mesmo conte√∫do, independentemente de nomes ou locais diferentes.

- **An√°lise Baseada no Conte√∫do:** A compara√ß√£o √© feita exclusivamente pelo conte√∫do do arquivo (hash SHA-256), ignorando nome, extens√£o ou caminho. Arquivos id√™nticos ser√£o detectados como duplicatas, mesmo que estejam armazenados em subdiret√≥rios distintos.

- **Processamento Paralelo (Rayon):** Alta performance ao escanear grandes volumes de arquivos.

- **Barra de Progresso Interativa:** Acompanhe a evolu√ß√£o do processamento de arquivos com uma barra de progresso din√¢mica, indicando o tempo estimado e a porcentagem conclu√≠da.

- **Sa√≠da organizada:** Relat√≥rios claros, com agrupamento de arquivos duplicados por hash.

<br>

## REQUISITOS ‚öôÔ∏è

**Rust:** vers√£o 1.70 ou superior (recomendado)  
**Cargo:** gerenciador de pacotes do Rust (instalado junto com o Rut)

<br>

## INSTALA√á√ÉO E USO üöÄ

### 1. Clone o reposit√≥rio

```bash
git clone https://github.com/Paulogb98/DupFile-Analyzer.git
cd DupFile-Analyzer
```

<br>

### 2. Instale as depend√™ncias

Para compilar e rodar o projeto, basta instalar o Rust e o Cargo, que s√£o os requisitos principais para o funcionamento da aplica√ß√£o.

<br>

No linux, instale facilmente com:

```bash
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
```

<br>

Caso voc√™ seja usu√°rio de Windows, siga os passos no [site oficial](https://www.rust-lang.org/tools/install).

<br>

### 3. Compile o projeto

Modo release para m√°xima performance:

```bash
cargo build --release
```

<br>

O execut√°vel estar√° dispon√≠vel em:

```bash
target/release/dupfile-analyzer
```

<br>

### 4. Execute o arquivo principal .exe

Nesse caso, existem duas op√ß√µes. Voc√™ pode executar diretamente com 'cargo run', ou rodar o bin√°rio compilado:

<br>

> Usando cargo run:

```bash
cargo run --release -- "<DIRET√ìRIO>"
```

**OU**

> Usando bin√°rio compilado (.exe):

```bash
cd target/release
dupfile-analyzer.exe -- "<DIRET√ìRIO>"
```

<br>

E depois...

<br>

> Exemplo Pr√°tico:

```bash
cargo run --release -- "C:/Users/SeuUsuario/Documents"
```

**OU**

```bash
dupfile-analyzer.exe -- "C:/Users/SeuUsuario/Documents"
```

<br>

## ESTRUTURA DE DIRET√ìRIOS üìÅ

```plaintext
DupFile-Analyzer/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ main.rs
‚îÇ   ‚îî‚îÄ‚îÄ utils.rs
‚îú‚îÄ‚îÄ Cargo.toml
‚îú‚îÄ‚îÄ Cargo.lock
‚îú‚îÄ‚îÄ LICENSE
‚îî‚îÄ‚îÄ README.md
```

<br>

## ASPECTOS T√âCNICOS üõ†Ô∏è

- ### C√°lculo de Hash SHA-256
Cada arquivo √© lido em blocos (buffered) para otimizar o uso de mem√≥ria. O hash SHA-256 √© aplicado ao conte√∫do de cada arquivo de maneira segura e eficiente.

- ### Processamento Paralelo com Rayon
O uso do Rayon permite que os arquivos sejam processados simultaneamente, dividindo a carga de trabalho entre m√∫ltiplos n√∫cleos do processador. Isso melhora significativamente o desempenho, especialmente ao lidar com grandes volumes de dados.

- ### Barra de Progresso e Threads
O programa usa uma thread separada para atualizar a barra de progresso enquanto calcula os hashes dos arquivos de forma paralela. A sincroniza√ß√£o entre as threads √© garantida usando `Arc<Mutex<ProgressBar>>`, permitindo que o progresso seja mostrado de forma precisa e em tempo real.

- ### Identifica√ß√£o de Duplicatas
Os arquivos s√£o agrupados pelo valor do hash. Se dois ou mais arquivos compartilham o mesmo hash, eles s√£o considerados duplicados, mesmo que seus nomes ou localiza√ß√µes sejam diferentes.

‚ö†Ô∏è **Aten√ß√£o:** arquivos vazios gerar√£o sempre o mesmo hash SHA-256 padr√£o (por exemplo, o hash de um arquivo vazio √© e3b0c44298fc1...), e ser√£o listados como duplicados. Isso √© comum de acontecer com arquivos __init__.py, caso voc√™ programe em Python.

<br>

## EXEMPLO DE SA√çDA üñ•Ô∏è

```bash
‚ÑπÔ∏è  Processando diret√≥rio: D:/Caminho/Para/Seus/Arquivos
‚úîÔ∏è  1742 arquivos encontrados. Processando...

[00:00:15] [========================================] 1742/1742 (100%)

‚ÑπÔ∏è  Foram encontradas 2 duplicatas

hash da0c30d23be40e8e1b1027e453e08a0388c1cd60a2d188088c37b3ef9ec523a1:
  /caminho/para/o/arquivo1.pdf
  /caminho/para/o/arquivo2.pdf

hash e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855:
  /caminho/para/o/arquivo3.png
  /caminho/para/o/arquivo4.png
```

- Os arquivos duplicados s√£o agrupados por hash.
- Cada grupo √© separado por linha em branco para facilitar a leitura.

<br>

## CONFIGURA√á√ïES DE OTIMIZA√á√ÉO üîß

No arquivo Cargo.toml, o projeto est√° configurado para priorizar a performance em runtime sobre o tempo de compila√ß√£o. Por isso, as seguintes op√ß√µes de perfil foram adotadas:

```toml
[profile.release]
opt-level = 3          # M√°xima otimiza√ß√£o de execu√ß√£o
lto = "fat"            # Link Time Optimization completo
codegen-units = 1      # Uma unidade de compila√ß√£o para melhor otimiza√ß√£o
strip = true           # Remove s√≠mbolos de debug do bin√°rio final
incremental = false    # Impede o reaproveitamente de partes de compila√ß√£o anteriores
```

<br>

## CONTRIBUI√á√ïES ü§ù

Contribui√ß√µes s√£o bem-vindas! Sinta-se √† vontade para abrir uma issue ou enviar um pull request.

<br>

## LICEN√áA üìö

Este projeto encontra-se publicado sob os termos de licen√ßa MIT. Veja o arquivo LICENSE para mais detalhes.
